/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/chriskery/slurm-bridge-operator/apis/kubecluster.org/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SlurmBridgeJobLister helps list SlurmBridgeJobs.
// All objects returned here must be treated as read-only.
type SlurmBridgeJobLister interface {
	// List lists all SlurmBridgeJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SlurmBridgeJob, err error)
	// SlurmBridgeJobs returns an object that can list and get SlurmBridgeJobs.
	SlurmBridgeJobs(namespace string) SlurmBridgeJobNamespaceLister
	SlurmBridgeJobListerExpansion
}

// slurmBridgeJobLister implements the SlurmBridgeJobLister interface.
type slurmBridgeJobLister struct {
	indexer cache.Indexer
}

// NewSlurmBridgeJobLister returns a new SlurmBridgeJobLister.
func NewSlurmBridgeJobLister(indexer cache.Indexer) SlurmBridgeJobLister {
	return &slurmBridgeJobLister{indexer: indexer}
}

// List lists all SlurmBridgeJobs in the indexer.
func (s *slurmBridgeJobLister) List(selector labels.Selector) (ret []*v1alpha1.SlurmBridgeJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SlurmBridgeJob))
	})
	return ret, err
}

// SlurmBridgeJobs returns an object that can list and get SlurmBridgeJobs.
func (s *slurmBridgeJobLister) SlurmBridgeJobs(namespace string) SlurmBridgeJobNamespaceLister {
	return slurmBridgeJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SlurmBridgeJobNamespaceLister helps list and get SlurmBridgeJobs.
// All objects returned here must be treated as read-only.
type SlurmBridgeJobNamespaceLister interface {
	// List lists all SlurmBridgeJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SlurmBridgeJob, err error)
	// Get retrieves the SlurmBridgeJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SlurmBridgeJob, error)
	SlurmBridgeJobNamespaceListerExpansion
}

// slurmBridgeJobNamespaceLister implements the SlurmBridgeJobNamespaceLister
// interface.
type slurmBridgeJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SlurmBridgeJobs in the indexer for a given namespace.
func (s slurmBridgeJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SlurmBridgeJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SlurmBridgeJob))
	})
	return ret, err
}

// Get retrieves the SlurmBridgeJob from the indexer for a given namespace and name.
func (s slurmBridgeJobNamespaceLister) Get(name string) (*v1alpha1.SlurmBridgeJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("slurmbridgejob"), name)
	}
	return obj.(*v1alpha1.SlurmBridgeJob), nil
}
