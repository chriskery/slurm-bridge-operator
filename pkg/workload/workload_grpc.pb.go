// Copyright (c) 2019 Sylabs, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0--rc2
// source: pkg/workload/workload.proto

package workload

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkloadManager_SubmitJob_FullMethodName          = "/workload.WorkloadManager/SubmitJob"
	WorkloadManager_SubmitJobContainer_FullMethodName = "/workload.WorkloadManager/SubmitJobContainer"
	WorkloadManager_CancelJob_FullMethodName          = "/workload.WorkloadManager/CancelJob"
	WorkloadManager_JobInfo_FullMethodName            = "/workload.WorkloadManager/JobInfo"
	WorkloadManager_JobSteps_FullMethodName           = "/workload.WorkloadManager/JobSteps"
	WorkloadManager_OpenFile_FullMethodName           = "/workload.WorkloadManager/OpenFile"
	WorkloadManager_TailFile_FullMethodName           = "/workload.WorkloadManager/TailFile"
	WorkloadManager_Resources_FullMethodName          = "/workload.WorkloadManager/Resources"
	WorkloadManager_Partitions_FullMethodName         = "/workload.WorkloadManager/Partitions"
	WorkloadManager_Partition_FullMethodName          = "/workload.WorkloadManager/Partition"
	WorkloadManager_Nodes_FullMethodName              = "/workload.WorkloadManager/Nodes"
	WorkloadManager_WorkloadInfo_FullMethodName       = "/workload.WorkloadManager/WorkloadInfo"
)

// WorkloadManagerClient is the client API for WorkloadManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadManagerClient interface {
	// SubmitJob submits new job to the workload manager and
	// returns job id that can be used to track job status.
	SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error)
	// SubmitJobContainer submits new job to the workload manager and
	// returns job id that can be used to track job status.
	SubmitJobContainer(ctx context.Context, in *SubmitJobContainerRequest, opts ...grpc.CallOption) (*SubmitJobContainerResponse, error)
	// CancelJob cancels job by job id.
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error)
	// JobInfo returns complete information about a particular job.
	// In case of JobArray the first job in slice is a root.
	// JobInfoResponse have to contain at least one element
	JobInfo(ctx context.Context, in *JobInfoRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	// JobSteps returns information about each individual job step.
	JobSteps(ctx context.Context, in *JobStepsRequest, opts ...grpc.CallOption) (*JobStepsResponse, error)
	// OpenFile opens a file and streams its content back. May be
	// useful for results collecting.
	OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (WorkloadManager_OpenFileClient, error)
	// TailFile opens a file and streams its content back. Unlike
	// OpenFile this call will watch file content changes and stream
	// new chunks continuously.
	TailFile(ctx context.Context, opts ...grpc.CallOption) (WorkloadManager_TailFileClient, error)
	// Resources returns partition resources
	// nodes, cpu, mem, wall-time and available features
	Resources(ctx context.Context, in *ResourcesRequest, opts ...grpc.CallOption) (*ResourcesResponse, error)
	// Partitions returns a list of available partitions.
	Partitions(ctx context.Context, in *PartitionsRequest, opts ...grpc.CallOption) (*PartitionsResponse, error)
	// Partition returns a single of available partitions.
	Partition(ctx context.Context, in *PartitionRequest, opts ...grpc.CallOption) (*PartitionResponse, error)
	// Nodes returns a single of available partitions.
	Nodes(ctx context.Context, in *NodesRequest, opts ...grpc.CallOption) (*NodesResponse, error)
	// WorkloadInfo provides info about workload (name, version, red-box uid)
	WorkloadInfo(ctx context.Context, in *WorkloadInfoRequest, opts ...grpc.CallOption) (*WorkloadInfoResponse, error)
}

type workloadManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadManagerClient(cc grpc.ClientConnInterface) WorkloadManagerClient {
	return &workloadManagerClient{cc}
}

func (c *workloadManagerClient) SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error) {
	out := new(SubmitJobResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_SubmitJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) SubmitJobContainer(ctx context.Context, in *SubmitJobContainerRequest, opts ...grpc.CallOption) (*SubmitJobContainerResponse, error) {
	out := new(SubmitJobContainerResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_SubmitJobContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error) {
	out := new(CancelJobResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_CancelJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) JobInfo(ctx context.Context, in *JobInfoRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_JobInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) JobSteps(ctx context.Context, in *JobStepsRequest, opts ...grpc.CallOption) (*JobStepsResponse, error) {
	out := new(JobStepsResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_JobSteps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (WorkloadManager_OpenFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkloadManager_ServiceDesc.Streams[0], WorkloadManager_OpenFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadManagerOpenFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkloadManager_OpenFileClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type workloadManagerOpenFileClient struct {
	grpc.ClientStream
}

func (x *workloadManagerOpenFileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workloadManagerClient) TailFile(ctx context.Context, opts ...grpc.CallOption) (WorkloadManager_TailFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkloadManager_ServiceDesc.Streams[1], WorkloadManager_TailFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadManagerTailFileClient{stream}
	return x, nil
}

type WorkloadManager_TailFileClient interface {
	Send(*TailFileRequest) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type workloadManagerTailFileClient struct {
	grpc.ClientStream
}

func (x *workloadManagerTailFileClient) Send(m *TailFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workloadManagerTailFileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workloadManagerClient) Resources(ctx context.Context, in *ResourcesRequest, opts ...grpc.CallOption) (*ResourcesResponse, error) {
	out := new(ResourcesResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_Resources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) Partitions(ctx context.Context, in *PartitionsRequest, opts ...grpc.CallOption) (*PartitionsResponse, error) {
	out := new(PartitionsResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_Partitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) Partition(ctx context.Context, in *PartitionRequest, opts ...grpc.CallOption) (*PartitionResponse, error) {
	out := new(PartitionResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_Partition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) Nodes(ctx context.Context, in *NodesRequest, opts ...grpc.CallOption) (*NodesResponse, error) {
	out := new(NodesResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_Nodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) WorkloadInfo(ctx context.Context, in *WorkloadInfoRequest, opts ...grpc.CallOption) (*WorkloadInfoResponse, error) {
	out := new(WorkloadInfoResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_WorkloadInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadManagerServer is the server API for WorkloadManager service.
// All implementations must embed UnimplementedWorkloadManagerServer
// for forward compatibility
type WorkloadManagerServer interface {
	// SubmitJob submits new job to the workload manager and
	// returns job id that can be used to track job status.
	SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error)
	// SubmitJobContainer submits new job to the workload manager and
	// returns job id that can be used to track job status.
	SubmitJobContainer(context.Context, *SubmitJobContainerRequest) (*SubmitJobContainerResponse, error)
	// CancelJob cancels job by job id.
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error)
	// JobInfo returns complete information about a particular job.
	// In case of JobArray the first job in slice is a root.
	// JobInfoResponse have to contain at least one element
	JobInfo(context.Context, *JobInfoRequest) (*JobInfoResponse, error)
	// JobSteps returns information about each individual job step.
	JobSteps(context.Context, *JobStepsRequest) (*JobStepsResponse, error)
	// OpenFile opens a file and streams its content back. May be
	// useful for results collecting.
	OpenFile(*OpenFileRequest, WorkloadManager_OpenFileServer) error
	// TailFile opens a file and streams its content back. Unlike
	// OpenFile this call will watch file content changes and stream
	// new chunks continuously.
	TailFile(WorkloadManager_TailFileServer) error
	// Resources returns partition resources
	// nodes, cpu, mem, wall-time and available features
	Resources(context.Context, *ResourcesRequest) (*ResourcesResponse, error)
	// Partitions returns a list of available partitions.
	Partitions(context.Context, *PartitionsRequest) (*PartitionsResponse, error)
	// Partition returns a single of available partitions.
	Partition(context.Context, *PartitionRequest) (*PartitionResponse, error)
	// Nodes returns a single of available partitions.
	Nodes(context.Context, *NodesRequest) (*NodesResponse, error)
	// WorkloadInfo provides info about workload (name, version, red-box uid)
	WorkloadInfo(context.Context, *WorkloadInfoRequest) (*WorkloadInfoResponse, error)
	mustEmbedUnimplementedWorkloadManagerServer()
}

// UnimplementedWorkloadManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkloadManagerServer struct {
}

func (UnimplementedWorkloadManagerServer) SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedWorkloadManagerServer) SubmitJobContainer(context.Context, *SubmitJobContainerRequest) (*SubmitJobContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJobContainer not implemented")
}
func (UnimplementedWorkloadManagerServer) CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedWorkloadManagerServer) JobInfo(context.Context, *JobInfoRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobInfo not implemented")
}
func (UnimplementedWorkloadManagerServer) JobSteps(context.Context, *JobStepsRequest) (*JobStepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobSteps not implemented")
}
func (UnimplementedWorkloadManagerServer) OpenFile(*OpenFileRequest, WorkloadManager_OpenFileServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenFile not implemented")
}
func (UnimplementedWorkloadManagerServer) TailFile(WorkloadManager_TailFileServer) error {
	return status.Errorf(codes.Unimplemented, "method TailFile not implemented")
}
func (UnimplementedWorkloadManagerServer) Resources(context.Context, *ResourcesRequest) (*ResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resources not implemented")
}
func (UnimplementedWorkloadManagerServer) Partitions(context.Context, *PartitionsRequest) (*PartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Partitions not implemented")
}
func (UnimplementedWorkloadManagerServer) Partition(context.Context, *PartitionRequest) (*PartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Partition not implemented")
}
func (UnimplementedWorkloadManagerServer) Nodes(context.Context, *NodesRequest) (*NodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nodes not implemented")
}
func (UnimplementedWorkloadManagerServer) WorkloadInfo(context.Context, *WorkloadInfoRequest) (*WorkloadInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkloadInfo not implemented")
}
func (UnimplementedWorkloadManagerServer) mustEmbedUnimplementedWorkloadManagerServer() {}

// UnsafeWorkloadManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadManagerServer will
// result in compilation errors.
type UnsafeWorkloadManagerServer interface {
	mustEmbedUnimplementedWorkloadManagerServer()
}

func RegisterWorkloadManagerServer(s grpc.ServiceRegistrar, srv WorkloadManagerServer) {
	s.RegisterService(&WorkloadManager_ServiceDesc, srv)
}

func _WorkloadManager_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_SubmitJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).SubmitJob(ctx, req.(*SubmitJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_SubmitJobContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).SubmitJobContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_SubmitJobContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).SubmitJobContainer(ctx, req.(*SubmitJobContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_CancelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_JobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).JobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_JobInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).JobInfo(ctx, req.(*JobInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_JobSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).JobSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_JobSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).JobSteps(ctx, req.(*JobStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_OpenFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpenFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkloadManagerServer).OpenFile(m, &workloadManagerOpenFileServer{stream})
}

type WorkloadManager_OpenFileServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type workloadManagerOpenFileServer struct {
	grpc.ServerStream
}

func (x *workloadManagerOpenFileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkloadManager_TailFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkloadManagerServer).TailFile(&workloadManagerTailFileServer{stream})
}

type WorkloadManager_TailFileServer interface {
	Send(*Chunk) error
	Recv() (*TailFileRequest, error)
	grpc.ServerStream
}

type workloadManagerTailFileServer struct {
	grpc.ServerStream
}

func (x *workloadManagerTailFileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workloadManagerTailFileServer) Recv() (*TailFileRequest, error) {
	m := new(TailFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WorkloadManager_Resources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Resources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Resources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Resources(ctx, req.(*ResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_Partitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Partitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Partitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Partitions(ctx, req.(*PartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_Partition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Partition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Partition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Partition(ctx, req.(*PartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Nodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Nodes(ctx, req.(*NodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_WorkloadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).WorkloadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_WorkloadInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).WorkloadInfo(ctx, req.(*WorkloadInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkloadManager_ServiceDesc is the grpc.ServiceDesc for WorkloadManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkloadManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workload.WorkloadManager",
	HandlerType: (*WorkloadManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJob",
			Handler:    _WorkloadManager_SubmitJob_Handler,
		},
		{
			MethodName: "SubmitJobContainer",
			Handler:    _WorkloadManager_SubmitJobContainer_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _WorkloadManager_CancelJob_Handler,
		},
		{
			MethodName: "JobInfo",
			Handler:    _WorkloadManager_JobInfo_Handler,
		},
		{
			MethodName: "JobSteps",
			Handler:    _WorkloadManager_JobSteps_Handler,
		},
		{
			MethodName: "Resources",
			Handler:    _WorkloadManager_Resources_Handler,
		},
		{
			MethodName: "Partitions",
			Handler:    _WorkloadManager_Partitions_Handler,
		},
		{
			MethodName: "Partition",
			Handler:    _WorkloadManager_Partition_Handler,
		},
		{
			MethodName: "Nodes",
			Handler:    _WorkloadManager_Nodes_Handler,
		},
		{
			MethodName: "WorkloadInfo",
			Handler:    _WorkloadManager_WorkloadInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenFile",
			Handler:       _WorkloadManager_OpenFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TailFile",
			Handler:       _WorkloadManager_TailFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/workload/workload.proto",
}
