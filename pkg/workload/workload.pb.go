// Copyright (c) 2019 Sylabs, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0--rc2
// source: pkg/workload/workload.proto

package workload

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TailAction int32

const (
	TailAction_Start             TailAction = 0
	TailAction_ReadToEndAndClose TailAction = 1
)

// Enum value maps for TailAction.
var (
	TailAction_name = map[int32]string{
		0: "Start",
		1: "ReadToEndAndClose",
	}
	TailAction_value = map[string]int32{
		"Start":             0,
		"ReadToEndAndClose": 1,
	}
)

func (x TailAction) Enum() *TailAction {
	p := new(TailAction)
	*p = x
	return p
}

func (x TailAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TailAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_workload_workload_proto_enumTypes[0].Descriptor()
}

func (TailAction) Type() protoreflect.EnumType {
	return &file_pkg_workload_workload_proto_enumTypes[0]
}

func (x TailAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TailAction.Descriptor instead.
func (TailAction) EnumDescriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{0}
}

type JobStatus int32

const (
	JobStatus_COMPLETED JobStatus = 0
	JobStatus_CANCELLED JobStatus = 1
	JobStatus_FAILED    JobStatus = 2
	JobStatus_TIMEOUT   JobStatus = 3
	JobStatus_PENDING   JobStatus = 4
	JobStatus_RUNNING   JobStatus = 5
	JobStatus_UNKNOWN   JobStatus = 10
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0:  "COMPLETED",
		1:  "CANCELLED",
		2:  "FAILED",
		3:  "TIMEOUT",
		4:  "PENDING",
		5:  "RUNNING",
		10: "UNKNOWN",
	}
	JobStatus_value = map[string]int32{
		"COMPLETED": 0,
		"CANCELLED": 1,
		"FAILED":    2,
		"TIMEOUT":   3,
		"PENDING":   4,
		"RUNNING":   5,
		"UNKNOWN":   10,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_workload_workload_proto_enumTypes[1].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_pkg_workload_workload_proto_enumTypes[1]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{1}
}

type SubmitJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bash script that will be submitted to a workload manager.
	Script string `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	// Partition where job should be submitted.
	Partition string `protobuf:"bytes,2,opt,name=partition,proto3" json:"partition,omitempty"`
	// ID of a client who submitted this job.
	ClientId   string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	RunAsUser  string `protobuf:"bytes,4,opt,name=run_as_user,json=runAsUser,proto3" json:"run_as_user,omitempty"`
	RunAsGroup string `protobuf:"bytes,5,opt,name=run_as_group,json=runAsGroup,proto3" json:"run_as_group,omitempty"`
	Uid        string `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *SubmitJobRequest) Reset() {
	*x = SubmitJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest) ProtoMessage() {}

func (x *SubmitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobRequest.ProtoReflect.Descriptor instead.
func (*SubmitJobRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitJobRequest) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *SubmitJobRequest) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *SubmitJobRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SubmitJobRequest) GetRunAsUser() string {
	if x != nil {
		return x.RunAsUser
	}
	return ""
}

func (x *SubmitJobRequest) GetRunAsGroup() string {
	if x != nil {
		return x.RunAsGroup
	}
	return ""
}

func (x *SubmitJobRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type SubmitJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job ID to track submitted job.
	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *SubmitJobResponse) Reset() {
	*x = SubmitJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobResponse) ProtoMessage() {}

func (x *SubmitJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobResponse.ProtoReflect.Descriptor instead.
func (*SubmitJobResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitJobResponse) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type CancelJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a job to be cancelled.
	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{2}
}

func (x *CancelJobRequest) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type CancelJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelJobResponse) Reset() {
	*x = CancelJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobResponse) ProtoMessage() {}

func (x *CancelJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobResponse.ProtoReflect.Descriptor instead.
func (*CancelJobResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{3}
}

type JobInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a job to fetch info of.
	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *JobInfoRequest) Reset() {
	*x = JobInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfoRequest) ProtoMessage() {}

func (x *JobInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfoRequest.ProtoReflect.Descriptor instead.
func (*JobInfoRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{4}
}

func (x *JobInfoRequest) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type JobInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job information.
	Info []*JobInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *JobInfoResponse) Reset() {
	*x = JobInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfoResponse) ProtoMessage() {}

func (x *JobInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfoResponse.ProtoReflect.Descriptor instead.
func (*JobInfoResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{5}
}

func (x *JobInfoResponse) GetInfo() []*JobInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type JobStepsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a job to fetch steps of.
	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *JobStepsRequest) Reset() {
	*x = JobStepsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStepsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStepsRequest) ProtoMessage() {}

func (x *JobStepsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStepsRequest.ProtoReflect.Descriptor instead.
func (*JobStepsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{6}
}

func (x *JobStepsRequest) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type JobStepsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job steps information.
	JobSteps []*JobStepInfo `protobuf:"bytes,1,rep,name=job_steps,json=jobSteps,proto3" json:"job_steps,omitempty"`
}

func (x *JobStepsResponse) Reset() {
	*x = JobStepsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStepsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStepsResponse) ProtoMessage() {}

func (x *JobStepsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStepsResponse.ProtoReflect.Descriptor instead.
func (*JobStepsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{7}
}

func (x *JobStepsResponse) GetJobSteps() []*JobStepInfo {
	if x != nil {
		return x.JobSteps
	}
	return nil
}

type OpenFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to file to open.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *OpenFileRequest) Reset() {
	*x = OpenFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFileRequest) ProtoMessage() {}

func (x *OpenFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFileRequest.ProtoReflect.Descriptor instead.
func (*OpenFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{8}
}

func (x *OpenFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition which resources should be returned.
	Partition string `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (x *ResourcesRequest) Reset() {
	*x = ResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesRequest) ProtoMessage() {}

func (x *ResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesRequest.ProtoReflect.Descriptor instead.
func (*ResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{9}
}

func (x *ResourcesRequest) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

type ResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of nodes in the partition.
	Nodes int64 `protobuf:"varint,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	// Number of cpus on each node.
	CpuPerNode int64 `protobuf:"varint,2,opt,name=cpuPerNode,proto3" json:"cpuPerNode,omitempty"`
	// Amount of memory on each node.
	MemPerNode int64 `protobuf:"varint,3,opt,name=memPerNode,proto3" json:"memPerNode,omitempty"`
	// Wall time setting for the partition.
	WallTime int64 `protobuf:"varint,4,opt,name=wallTime,proto3" json:"wallTime,omitempty"`
	// Set of features of the partition.
	Features []*Feature `protobuf:"bytes,5,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *ResourcesResponse) Reset() {
	*x = ResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesResponse) ProtoMessage() {}

func (x *ResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesResponse.ProtoReflect.Descriptor instead.
func (*ResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{10}
}

func (x *ResourcesResponse) GetNodes() int64 {
	if x != nil {
		return x.Nodes
	}
	return 0
}

func (x *ResourcesResponse) GetCpuPerNode() int64 {
	if x != nil {
		return x.CpuPerNode
	}
	return 0
}

func (x *ResourcesResponse) GetMemPerNode() int64 {
	if x != nil {
		return x.MemPerNode
	}
	return 0
}

func (x *ResourcesResponse) GetWallTime() int64 {
	if x != nil {
		return x.WallTime
	}
	return 0
}

func (x *ResourcesResponse) GetFeatures() []*Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

type PartitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PartitionsRequest) Reset() {
	*x = PartitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionsRequest) ProtoMessage() {}

func (x *PartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionsRequest.ProtoReflect.Descriptor instead.
func (*PartitionsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{11}
}

type PartitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partition []string `protobuf:"bytes,1,rep,name=partition,proto3" json:"partition,omitempty"`
}

func (x *PartitionsResponse) Reset() {
	*x = PartitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionsResponse) ProtoMessage() {}

func (x *PartitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionsResponse.ProtoReflect.Descriptor instead.
func (*PartitionsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{12}
}

func (x *PartitionsResponse) GetPartition() []string {
	if x != nil {
		return x.Partition
	}
	return nil
}

type NodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodesRequest) Reset() {
	*x = NodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesRequest) ProtoMessage() {}

func (x *NodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesRequest.ProtoReflect.Descriptor instead.
func (*NodesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{13}
}

func (x *NodesRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodesResponse) Reset() {
	*x = NodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesResponse) ProtoMessage() {}

func (x *NodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesResponse.ProtoReflect.Descriptor instead.
func (*NodesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{14}
}

func (x *NodesResponse) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpus       int64  `protobuf:"varint,1,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Memory     int64  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Gpus       int64  `protobuf:"varint,3,opt,name=gpus,proto3" json:"gpus,omitempty"`
	GpuType    string `protobuf:"bytes,4,opt,name=gpuType,proto3" json:"gpuType,omitempty"`
	AlloCpus   int64  `protobuf:"varint,5,opt,name=alloCpus,proto3" json:"alloCpus,omitempty"`
	AlloMemory int64  `protobuf:"varint,6,opt,name=alloMemory,proto3" json:"alloMemory,omitempty"`
	AlloGpus   int64  `protobuf:"varint,7,opt,name=alloGpus,proto3" json:"alloGpus,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{15}
}

func (x *Node) GetCpus() int64 {
	if x != nil {
		return x.Cpus
	}
	return 0
}

func (x *Node) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Node) GetGpus() int64 {
	if x != nil {
		return x.Gpus
	}
	return 0
}

func (x *Node) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *Node) GetAlloCpus() int64 {
	if x != nil {
		return x.AlloCpus
	}
	return 0
}

func (x *Node) GetAlloMemory() int64 {
	if x != nil {
		return x.AlloMemory
	}
	return 0
}

func (x *Node) GetAlloGpus() int64 {
	if x != nil {
		return x.AlloGpus
	}
	return 0
}

type PartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partition string `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (x *PartitionRequest) Reset() {
	*x = PartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRequest) ProtoMessage() {}

func (x *PartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRequest.ProtoReflect.Descriptor instead.
func (*PartitionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{16}
}

func (x *PartitionRequest) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

type PartitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *PartitionResponse) Reset() {
	*x = PartitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionResponse) ProtoMessage() {}

func (x *PartitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionResponse.ProtoReflect.Descriptor instead.
func (*PartitionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{17}
}

func (x *PartitionResponse) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type WorkloadInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkloadInfoRequest) Reset() {
	*x = WorkloadInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadInfoRequest) ProtoMessage() {}

func (x *WorkloadInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadInfoRequest.ProtoReflect.Descriptor instead.
func (*WorkloadInfoRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{18}
}

type WorkloadInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uid     int64  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *WorkloadInfoResponse) Reset() {
	*x = WorkloadInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadInfoResponse) ProtoMessage() {}

func (x *WorkloadInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadInfoResponse.ProtoReflect.Descriptor instead.
func (*WorkloadInfoResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{19}
}

func (x *WorkloadInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkloadInfoResponse) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type SubmitJobContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job image name
	ImageName string `protobuf:"bytes,1,opt,name=imageName,proto3" json:"imageName,omitempty"`
	// Number of nodes in the partition.
	Nodes int64 `protobuf:"varint,2,opt,name=nodes,proto3" json:"nodes,omitempty"`
	// Number of cpus on each node.
	CpuPerNode int64 `protobuf:"varint,3,opt,name=cpuPerNode,proto3" json:"cpuPerNode,omitempty"`
	// Amount of memory on each node.
	MemPerNode int64 `protobuf:"varint,4,opt,name=memPerNode,proto3" json:"memPerNode,omitempty"`
	// Wall time setting for the partition.
	WallTime int64 `protobuf:"varint,5,opt,name=wallTime,proto3" json:"wallTime,omitempty"`
	// Partition where job should be submitted.
	Partition string `protobuf:"bytes,6,opt,name=partition,proto3" json:"partition,omitempty"`
	// ID of a client who submitted this job.
	ClientId string              `protobuf:"bytes,7,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Options  *SingularityOptions `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *SubmitJobContainerRequest) Reset() {
	*x = SubmitJobContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobContainerRequest) ProtoMessage() {}

func (x *SubmitJobContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobContainerRequest.ProtoReflect.Descriptor instead.
func (*SubmitJobContainerRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{20}
}

func (x *SubmitJobContainerRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *SubmitJobContainerRequest) GetNodes() int64 {
	if x != nil {
		return x.Nodes
	}
	return 0
}

func (x *SubmitJobContainerRequest) GetCpuPerNode() int64 {
	if x != nil {
		return x.CpuPerNode
	}
	return 0
}

func (x *SubmitJobContainerRequest) GetMemPerNode() int64 {
	if x != nil {
		return x.MemPerNode
	}
	return 0
}

func (x *SubmitJobContainerRequest) GetWallTime() int64 {
	if x != nil {
		return x.WallTime
	}
	return 0
}

func (x *SubmitJobContainerRequest) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *SubmitJobContainerRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SubmitJobContainerRequest) GetOptions() *SingularityOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type SingularityOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App           string   `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	AllowUnsigned bool     `protobuf:"varint,2,opt,name=allowUnsigned,proto3" json:"allowUnsigned,omitempty"`
	Binds         []string `protobuf:"bytes,3,rep,name=binds,proto3" json:"binds,omitempty"`
	ClearEnv      bool     `protobuf:"varint,4,opt,name=clearEnv,proto3" json:"clearEnv,omitempty"`
	FakeRoot      bool     `protobuf:"varint,5,opt,name=fakeRoot,proto3" json:"fakeRoot,omitempty"`
	HostName      string   `protobuf:"bytes,6,opt,name=hostName,proto3" json:"hostName,omitempty"`
	Ipc           bool     `protobuf:"varint,7,opt,name=ipc,proto3" json:"ipc,omitempty"`
	Pid           bool     `protobuf:"varint,8,opt,name=pid,proto3" json:"pid,omitempty"`
	NoPrivs       bool     `protobuf:"varint,9,opt,name=noPrivs,proto3" json:"noPrivs,omitempty"`
	Writable      bool     `protobuf:"varint,10,opt,name=writable,proto3" json:"writable,omitempty"`
}

func (x *SingularityOptions) Reset() {
	*x = SingularityOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingularityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingularityOptions) ProtoMessage() {}

func (x *SingularityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingularityOptions.ProtoReflect.Descriptor instead.
func (*SingularityOptions) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{21}
}

func (x *SingularityOptions) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *SingularityOptions) GetAllowUnsigned() bool {
	if x != nil {
		return x.AllowUnsigned
	}
	return false
}

func (x *SingularityOptions) GetBinds() []string {
	if x != nil {
		return x.Binds
	}
	return nil
}

func (x *SingularityOptions) GetClearEnv() bool {
	if x != nil {
		return x.ClearEnv
	}
	return false
}

func (x *SingularityOptions) GetFakeRoot() bool {
	if x != nil {
		return x.FakeRoot
	}
	return false
}

func (x *SingularityOptions) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *SingularityOptions) GetIpc() bool {
	if x != nil {
		return x.Ipc
	}
	return false
}

func (x *SingularityOptions) GetPid() bool {
	if x != nil {
		return x.Pid
	}
	return false
}

func (x *SingularityOptions) GetNoPrivs() bool {
	if x != nil {
		return x.NoPrivs
	}
	return false
}

func (x *SingularityOptions) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

type SubmitJobContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job ID to track submitted job.
	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *SubmitJobContainerResponse) Reset() {
	*x = SubmitJobContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobContainerResponse) ProtoMessage() {}

func (x *SubmitJobContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobContainerResponse.ProtoReflect.Descriptor instead.
func (*SubmitJobContainerResponse) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{22}
}

func (x *SubmitJobContainerResponse) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type TailFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action TailAction `protobuf:"varint,1,opt,name=action,proto3,enum=workload.TailAction" json:"action,omitempty"`
	// Path to file to tail.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TailFileRequest) Reset() {
	*x = TailFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TailFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailFileRequest) ProtoMessage() {}

func (x *TailFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailFileRequest.ProtoReflect.Descriptor instead.
func (*TailFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{23}
}

func (x *TailFileRequest) GetAction() TailAction {
	if x != nil {
		return x.Action
	}
	return TailAction_Start
}

func (x *TailFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// JobInfo represents compete information about a single job.
type JobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a job.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of a user who submitted the job.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Job name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Job exit code. For slurm workload manager will be in form "int:int".
	ExitCode string `protobuf:"bytes,4,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Job current status.
	Status JobStatus `protobuf:"varint,5,opt,name=status,proto3,enum=workload.JobStatus" json:"status,omitempty"`
	// Job submit time.
	SubmitTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	// Job start time.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Job running time.
	RunTime *durationpb.Duration `protobuf:"bytes,8,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
	// Job time limit.
	TimeLimit *durationpb.Duration `protobuf:"bytes,9,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	// Job working directory.
	WorkingDir string `protobuf:"bytes,10,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	// Path to job's standard output file.
	StdOut string `protobuf:"bytes,11,opt,name=std_out,json=stdOut,proto3" json:"std_out,omitempty"`
	// Path to job's standard error file.
	StdErr string `protobuf:"bytes,12,opt,name=std_err,json=stdErr,proto3" json:"std_err,omitempty"`
	// Cluster partition on which job resides.
	Partition string `protobuf:"bytes,13,opt,name=partition,proto3" json:"partition,omitempty"`
	// List of nodes on which job is executed.
	NodeList string `protobuf:"bytes,14,opt,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
	// Host from which job was submitted.
	BatchHost string `protobuf:"bytes,15,opt,name=batch_host,json=batchHost,proto3" json:"batch_host,omitempty"`
	// Number of nodes requested by job.
	NumNodes string `protobuf:"bytes,16,opt,name=num_nodes,json=numNodes,proto3" json:"num_nodes,omitempty"`
	// Job array id.
	ArrayId string `protobuf:"bytes,17,opt,name=array_id,json=arrayId,proto3" json:"array_id,omitempty"`
	// Job array id.
	Reason string `protobuf:"bytes,18,opt,name=reason,proto3" json:"reason,omitempty"`
	// Job time limit.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *JobInfo) Reset() {
	*x = JobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo) ProtoMessage() {}

func (x *JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo.ProtoReflect.Descriptor instead.
func (*JobInfo) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{24}
}

func (x *JobInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobInfo) GetExitCode() string {
	if x != nil {
		return x.ExitCode
	}
	return ""
}

func (x *JobInfo) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_COMPLETED
}

func (x *JobInfo) GetSubmitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmitTime
	}
	return nil
}

func (x *JobInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *JobInfo) GetRunTime() *durationpb.Duration {
	if x != nil {
		return x.RunTime
	}
	return nil
}

func (x *JobInfo) GetTimeLimit() *durationpb.Duration {
	if x != nil {
		return x.TimeLimit
	}
	return nil
}

func (x *JobInfo) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *JobInfo) GetStdOut() string {
	if x != nil {
		return x.StdOut
	}
	return ""
}

func (x *JobInfo) GetStdErr() string {
	if x != nil {
		return x.StdErr
	}
	return ""
}

func (x *JobInfo) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *JobInfo) GetNodeList() string {
	if x != nil {
		return x.NodeList
	}
	return ""
}

func (x *JobInfo) GetBatchHost() string {
	if x != nil {
		return x.BatchHost
	}
	return ""
}

func (x *JobInfo) GetNumNodes() string {
	if x != nil {
		return x.NumNodes
	}
	return ""
}

func (x *JobInfo) GetArrayId() string {
	if x != nil {
		return x.ArrayId
	}
	return ""
}

func (x *JobInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *JobInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// JobStepInfo represents information about a single job step.
type JobStepInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID od a job step.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Job step name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Job step exit code.
	ExitCode int32 `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Job step current status.
	Status JobStatus `protobuf:"varint,4,opt,name=status,proto3,enum=workload.JobStatus" json:"status,omitempty"`
	// Job step start time.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Job step end time.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *JobStepInfo) Reset() {
	*x = JobStepInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStepInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStepInfo) ProtoMessage() {}

func (x *JobStepInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStepInfo.ProtoReflect.Descriptor instead.
func (*JobStepInfo) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{25}
}

func (x *JobStepInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobStepInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobStepInfo) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *JobStepInfo) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_COMPLETED
}

func (x *JobStepInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *JobStepInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Chunk is an arbitrary amount of bytes.
type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{26}
}

func (x *Chunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Quantity int64  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_workload_workload_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_workload_workload_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_pkg_workload_workload_proto_rawDescGZIP(), []int{27}
}

func (x *Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feature) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Feature) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

var File_pkg_workload_workload_proto protoreflect.FileDescriptor

var file_pkg_workload_workload_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x22, 0x29, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x27, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0f, 0x4a, 0x6f, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x46, 0x0a,
	0x10, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6a, 0x6f, 0x62,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x30, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x70,
	0x75, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x12, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24,
	0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x67, 0x70, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x43, 0x70, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x43, 0x70, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c,
	0x6c, 0x6f, 0x47, 0x70, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x6c,
	0x6c, 0x6f, 0x47, 0x70, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x14, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x50, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6b, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x6b, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x70, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x69, 0x70, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x33, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x54,
	0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0xac, 0x05, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x72,
	0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x74, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x45, 0x72, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x75, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x72, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xed, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x21, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x53, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2a, 0x2e, 0x0a, 0x0a, 0x54, 0x61, 0x69, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x41, 0x6e, 0x64,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x01, 0x2a, 0x69, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x0a, 0x32, 0xd5, 0x06, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12,
	0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01,
	0x12, 0x3a, 0x0a, 0x08, 0x54, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x28, 0x01, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x09,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2e,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pkg_workload_workload_proto_rawDescOnce sync.Once
	file_pkg_workload_workload_proto_rawDescData = file_pkg_workload_workload_proto_rawDesc
)

func file_pkg_workload_workload_proto_rawDescGZIP() []byte {
	file_pkg_workload_workload_proto_rawDescOnce.Do(func() {
		file_pkg_workload_workload_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_workload_workload_proto_rawDescData)
	})
	return file_pkg_workload_workload_proto_rawDescData
}

var file_pkg_workload_workload_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_workload_workload_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_pkg_workload_workload_proto_goTypes = []interface{}{
	(TailAction)(0),                    // 0: workload.TailAction
	(JobStatus)(0),                     // 1: workload.JobStatus
	(*SubmitJobRequest)(nil),           // 2: workload.SubmitJobRequest
	(*SubmitJobResponse)(nil),          // 3: workload.SubmitJobResponse
	(*CancelJobRequest)(nil),           // 4: workload.CancelJobRequest
	(*CancelJobResponse)(nil),          // 5: workload.CancelJobResponse
	(*JobInfoRequest)(nil),             // 6: workload.JobInfoRequest
	(*JobInfoResponse)(nil),            // 7: workload.JobInfoResponse
	(*JobStepsRequest)(nil),            // 8: workload.JobStepsRequest
	(*JobStepsResponse)(nil),           // 9: workload.JobStepsResponse
	(*OpenFileRequest)(nil),            // 10: workload.OpenFileRequest
	(*ResourcesRequest)(nil),           // 11: workload.ResourcesRequest
	(*ResourcesResponse)(nil),          // 12: workload.ResourcesResponse
	(*PartitionsRequest)(nil),          // 13: workload.PartitionsRequest
	(*PartitionsResponse)(nil),         // 14: workload.PartitionsResponse
	(*NodesRequest)(nil),               // 15: workload.NodesRequest
	(*NodesResponse)(nil),              // 16: workload.NodesResponse
	(*Node)(nil),                       // 17: workload.Node
	(*PartitionRequest)(nil),           // 18: workload.PartitionRequest
	(*PartitionResponse)(nil),          // 19: workload.PartitionResponse
	(*WorkloadInfoRequest)(nil),        // 20: workload.WorkloadInfoRequest
	(*WorkloadInfoResponse)(nil),       // 21: workload.WorkloadInfoResponse
	(*SubmitJobContainerRequest)(nil),  // 22: workload.SubmitJobContainerRequest
	(*SingularityOptions)(nil),         // 23: workload.SingularityOptions
	(*SubmitJobContainerResponse)(nil), // 24: workload.SubmitJobContainerResponse
	(*TailFileRequest)(nil),            // 25: workload.TailFileRequest
	(*JobInfo)(nil),                    // 26: workload.JobInfo
	(*JobStepInfo)(nil),                // 27: workload.JobStepInfo
	(*Chunk)(nil),                      // 28: workload.Chunk
	(*Feature)(nil),                    // 29: workload.Feature
	(*timestamppb.Timestamp)(nil),      // 30: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),        // 31: google.protobuf.Duration
}
var file_pkg_workload_workload_proto_depIdxs = []int32{
	26, // 0: workload.JobInfoResponse.info:type_name -> workload.JobInfo
	27, // 1: workload.JobStepsResponse.job_steps:type_name -> workload.JobStepInfo
	29, // 2: workload.ResourcesResponse.features:type_name -> workload.Feature
	17, // 3: workload.NodesResponse.nodes:type_name -> workload.Node
	23, // 4: workload.SubmitJobContainerRequest.options:type_name -> workload.SingularityOptions
	0,  // 5: workload.TailFileRequest.action:type_name -> workload.TailAction
	1,  // 6: workload.JobInfo.status:type_name -> workload.JobStatus
	30, // 7: workload.JobInfo.submit_time:type_name -> google.protobuf.Timestamp
	30, // 8: workload.JobInfo.start_time:type_name -> google.protobuf.Timestamp
	31, // 9: workload.JobInfo.run_time:type_name -> google.protobuf.Duration
	31, // 10: workload.JobInfo.time_limit:type_name -> google.protobuf.Duration
	30, // 11: workload.JobInfo.end_time:type_name -> google.protobuf.Timestamp
	1,  // 12: workload.JobStepInfo.status:type_name -> workload.JobStatus
	30, // 13: workload.JobStepInfo.start_time:type_name -> google.protobuf.Timestamp
	30, // 14: workload.JobStepInfo.end_time:type_name -> google.protobuf.Timestamp
	2,  // 15: workload.WorkloadManager.SubmitJob:input_type -> workload.SubmitJobRequest
	22, // 16: workload.WorkloadManager.SubmitJobContainer:input_type -> workload.SubmitJobContainerRequest
	4,  // 17: workload.WorkloadManager.CancelJob:input_type -> workload.CancelJobRequest
	6,  // 18: workload.WorkloadManager.JobInfo:input_type -> workload.JobInfoRequest
	8,  // 19: workload.WorkloadManager.JobSteps:input_type -> workload.JobStepsRequest
	10, // 20: workload.WorkloadManager.OpenFile:input_type -> workload.OpenFileRequest
	25, // 21: workload.WorkloadManager.TailFile:input_type -> workload.TailFileRequest
	11, // 22: workload.WorkloadManager.Resources:input_type -> workload.ResourcesRequest
	13, // 23: workload.WorkloadManager.Partitions:input_type -> workload.PartitionsRequest
	18, // 24: workload.WorkloadManager.Partition:input_type -> workload.PartitionRequest
	15, // 25: workload.WorkloadManager.Nodes:input_type -> workload.NodesRequest
	20, // 26: workload.WorkloadManager.WorkloadInfo:input_type -> workload.WorkloadInfoRequest
	3,  // 27: workload.WorkloadManager.SubmitJob:output_type -> workload.SubmitJobResponse
	24, // 28: workload.WorkloadManager.SubmitJobContainer:output_type -> workload.SubmitJobContainerResponse
	5,  // 29: workload.WorkloadManager.CancelJob:output_type -> workload.CancelJobResponse
	7,  // 30: workload.WorkloadManager.JobInfo:output_type -> workload.JobInfoResponse
	9,  // 31: workload.WorkloadManager.JobSteps:output_type -> workload.JobStepsResponse
	28, // 32: workload.WorkloadManager.OpenFile:output_type -> workload.Chunk
	28, // 33: workload.WorkloadManager.TailFile:output_type -> workload.Chunk
	12, // 34: workload.WorkloadManager.Resources:output_type -> workload.ResourcesResponse
	14, // 35: workload.WorkloadManager.Partitions:output_type -> workload.PartitionsResponse
	19, // 36: workload.WorkloadManager.Partition:output_type -> workload.PartitionResponse
	16, // 37: workload.WorkloadManager.Nodes:output_type -> workload.NodesResponse
	21, // 38: workload.WorkloadManager.WorkloadInfo:output_type -> workload.WorkloadInfoResponse
	27, // [27:39] is the sub-list for method output_type
	15, // [15:27] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pkg_workload_workload_proto_init() }
func file_pkg_workload_workload_proto_init() {
	if File_pkg_workload_workload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_workload_workload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStepsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStepsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingularityOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TailFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStepInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_workload_workload_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_workload_workload_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_workload_workload_proto_goTypes,
		DependencyIndexes: file_pkg_workload_workload_proto_depIdxs,
		EnumInfos:         file_pkg_workload_workload_proto_enumTypes,
		MessageInfos:      file_pkg_workload_workload_proto_msgTypes,
	}.Build()
	File_pkg_workload_workload_proto = out.File
	file_pkg_workload_workload_proto_rawDesc = nil
	file_pkg_workload_workload_proto_goTypes = nil
	file_pkg_workload_workload_proto_depIdxs = nil
}
